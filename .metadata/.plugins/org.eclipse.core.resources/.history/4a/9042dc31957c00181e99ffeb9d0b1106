
public class SpiralMaker {
	private int a=0;
	private int b=0;
	private int last=1;
	private int[][] array;
	s
	
	
	
	public void makeSpiral(int spiralDimension)
	{
		array = new int[spiralDimension][spiralDimension];
		array[0][0]=1;
		while (last < spiralDimension * spiralDimension )
		{
			leftToRight();
			topToBottom();
			rightToLeft();
			bottomToTop();
		}
		printSpiral();
	}
	
	public void makeAntiSpiral(int spiralDimension)
	{
		array = new int[spiralDimension][spiralDimension];
		array[0][0]=1;
		while (last < spiralDimension * spiralDimension )
		{
			topToBottom();
			leftToRight();
			bottomToTop();
			rightToLeft();
			
		}
		printSpiral();
	}
	
	public int getDigits(int x)
	{
		String d = "" + x;
		int digits = d.length();
		return digits; 
	}
	
	public void printSpiral()
	{
		int square = array.length * array.length;
		int dig = getDigits(square);
		for(int i = 0 ; i < array.length ; i++ )
		{
			for(int j = 0 ; j < array.length ; j++ )
			{
				System.out.print(array[j][i] + spaceMaker(1+(dig-getDigits(array[j][i]))));
			}
			System.out.println("\n");
		}
	}
	public String spaceMaker(int x)
	{
		String result = "";
		for (int i = 0 ; i < x ; i++)
		{
			result += " ";
		}
		return result;
	}
	
	public void leftToRight()
	{
		boolean canContinue = true;
		while (canContinue)
		{
			
			try
			{
				if (array[a+1][b]==0)
				{
					a+=1;
					last+=1;					
					array[a][b] = last;
				}
				else
				{
					canContinue = false;
				}
			}	
			catch(Exception e)
			{
				canContinue = false;
			}
		}
		
	}
	
	public void topToBottom()
	{
		boolean canContinue = true;
		while (canContinue)
		{
			
			try
			{
				if (array[a][b+1]==0)
				{
					b+=1;
					last+=1;					
					array[a][b] = last;
				}
				else
				{
					canContinue = false;
				}
			}	
			catch(Exception e)
			{
				canContinue = false;
			}
		}
		
	}
	
	public void rightToLeft()
	{
		boolean canContinue = true;
		while (canContinue)
		{
			
			try
			{
				if (array[a-1][b]==0)
				{
					a-=1;
					last+=1;					
					array[a][b] = last;
				}
				else
				{
					canContinue = false;
				}
			}	
			catch(Exception e)
			{
				canContinue = false;
			}
		}
		
	}
	
	public void bottomToTop()
	{
		boolean canContinue = true;
		while (canContinue)
		{
			
			try
			{
				if (array[a][b-1]==0)
				{
					b-=1;
					last+=1;					
					array[a][b] = last;
				}
				else
				{
					canContinue = false;
				}
			}	
			catch(Exception e)
			{
				canContinue = false;
			}
		}
		
	}

}
